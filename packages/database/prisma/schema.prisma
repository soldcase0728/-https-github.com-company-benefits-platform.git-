generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                String    @id @default(cuid())
  email             String    @unique
  firstName         String
  lastName          String
  ssn               String?   @db.Text
  dateOfBirth       String?   @db.Text
  phone             String?
  employeeNumber    String    @unique
  department        String?
  hireDate          DateTime
  
  dependents        Dependent[]
  enrollments       Enrollment[]
  auditLogs         AuditLog[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Dependent {
  id           String    @id @default(cuid())
  employeeId   String
  employee     Employee  @relation(fields: [employeeId], references: [id])
  firstName    String
  lastName     String
  ssn          String?   @db.Text
  dateOfBirth  String    @db.Text
  relationship String
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Plan {
  id            String   @id @default(cuid())
  name          String
  type          String   // MEDICAL, DENTAL, VISION
  tier          String   // BRONZE, SILVER, GOLD
  monthlyPremium Float
  deductible    Float
  maxOutOfPocket Float
  
  enrollments   Enrollment[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Enrollment {
  id           String   @id @default(cuid())
  employeeId   String
  employee     Employee @relation(fields: [employeeId], references: [id])
  planId       String
  plan         Plan     @relation(fields: [planId], references: [id])
  
  effectiveDate DateTime
  status       String   // ACTIVE, PENDING, TERMINATED
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([employeeId, planId])
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  action       String
  resourceType String
  resourceId   String
  ipAddress    String?
  userAgent    String?
  metadata     Json?
  
  employee     Employee? @relation(fields: [userId], references: [id])
  
  createdAt    DateTime @default(now())
}
