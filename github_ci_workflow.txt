name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # ==================== SECURITY SCANNING ====================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ==================== CODE QUALITY ====================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Check formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"
      
      - name: Run SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ==================== BUILD & TEST ====================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: benefits_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup database
        run: |
          npm run db:migrate
          npm run db:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/benefits_test
      
      - name: Build applications
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Run unit tests
        run: npm run test -- --coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/benefits_test
          REDIS_URL: redis://localhost:6379
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
      
      - name: Store build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/*/dist
            apps/*/.next
            packages/*/dist
          retention-days: 7

  # ==================== E2E TESTING ====================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          E2E_BASE_URL: http://localhost:3000
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # ==================== COMPLIANCE CHECK ====================
  compliance-check:
    name: Compliance Verification
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run HIPAA compliance checks
        run: npm run compliance:check
        env:
          COMPLIANCE_MODE: HIPAA
      
      - name: Check for PII exposure
        run: |
          echo "Scanning for PII patterns..."
          ! grep -r -E "(SSN|[0-9]{3}-[0-9]{2}-[0-9]{4})" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules .
      
      - name: Verify encryption configurations
        run: |
          echo "Verifying encryption settings..."
          grep -q "PII_ENCRYPTION_ENABLED=true" .env.example
          grep -q "ENCRYPTION_KEY" .env.example

  # ==================== DOCKER BUILD ====================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test, e2e-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service: [api-gateway, employee-portal, admin-dashboard]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.ECR_REGISTRY }}/benefits-${{ matrix.service }}:${{ github.sha }}
            ${{ secrets.ECR_REGISTRY }}/benefits-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            SERVICE_NAME=${{ matrix.service }}

  # ==================== DEPLOYMENT ====================
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [docker-build, compliance-check]
    if: github.event_name == 'push'
    
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://benefits.company.com' || github.ref == 'refs/heads/staging' && 'https://staging.benefits.company.com' || 'https://dev.benefits.company.com' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform
          terraform init
          terraform workspace select ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || 'dev' }}
          terraform apply -auto-approve -var="image_tag=${{ github.sha }}"
      
      - name: Update ECS services
        run: |
          ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || 'dev' }}
          
          for SERVICE in api-gateway employee-portal admin-dashboard; do
            aws ecs update-service \
              --cluster benefits-${ENVIRONMENT} \
              --service ${SERVICE} \
              --force-new-deployment
          done
      
      - name: Wait for deployment
        run: |
          ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || 'dev' }}
          
          for SERVICE in api-gateway employee-portal admin-dashboard; do
            aws ecs wait services-stable \
              --cluster benefits-${ENVIRONMENT} \
              --services ${SERVICE}
          done
      
      - name: Run smoke tests
        run: |
          ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || 'dev' }}
          BASE_URL=${{ github.ref == 'refs/heads/main' && 'https://api.benefits.company.com' || github.ref == 'refs/heads/staging' && 'https://api.staging.benefits.company.com' || 'https://api.dev.benefits.company.com' }}
          
          # Health check
          curl -f ${BASE_URL}/health || exit 1
          
          # Additional smoke tests
          npm run test:smoke -- --baseUrl=${BASE_URL}
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.ref == 'refs/heads/main' && 'Production' || github.ref == 'refs/heads/staging' && 'Staging' || 'Development' }}
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==================== POST-DEPLOYMENT ====================
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
      - name: Clear CDN cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      - name: Update status page
        run: |
          curl -X POST https://api.statuspage.io/v1/pages/${{ secrets.STATUSPAGE_ID }}/incidents \
            -H "Authorization: OAuth ${{ secrets.STATUSPAGE_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"incident": {"name": "Deployment completed", "status": "resolved", "impact": "none"}}'
      
      - name: Trigger monitoring alerts reset
        run: |
          curl -X POST https://api.datadoghq.com/api/v1/monitor/bulk_resolve \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -H "DD-APPLICATION-KEY: ${{ secrets.DATADOG_APP_KEY }}"